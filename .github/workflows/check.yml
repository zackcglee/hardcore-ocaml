name: check

on: [push, pull_request]

jobs:
  check:
    name: check
    runs-on: ubuntu-22.04
    permissions:
      statuses: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up OCaml
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: 4.13.1

      - name: Use cached dependencies
        id: cache-opam
        uses: actions/cache@v3
        env:
          cache-name: cache-opam
        with:
          path: |
            ~/.opam
            ./_opam
          key: ${{ env.cache-name }}-build-${{ hashFiles('hardcore.opam', 'build.sh') }}
          restore-keys: |
            ${{ env.cache-name }}-build-${{ hashFiles('hardcore.opam', 'build.sh') }}
            ${{ env.cache-name }}-build-

      - name: Install dependencies
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main"
          sudo apt-get update
          sudo apt-get install -y llvm-13-dev cmake clang-13
          opam install -y dune ounit llvm.13.0.0 odoc
          
      - name: Build Hardcore_Ocaml
        run: |
          eval $(opam env) 
          for d in */ ; do
             if [ "$d" != "doc/" ] && [ "$d" != "_opam/" ]; then
                 cd $d;make; cd ..
             fi
          done

      - name: Run test (regression)
        run: |
          eval $(opam env)
          for d in */ ; do
             if [ "$d" != "doc/" ] && [ "$d" != "_opam/" ]; then
                 echo "$d: "
                 cd $d;time ./$d; cd ..
             fi
          done
         
          

      - name: Report check status
        run: |
          TIME=`tail -1 test.txt | cut -d ' ' -f3`
          echo $TIME
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -d '{"state":"success","target_url":"","description":"'"${TIME}"'","context":"check/coverage"}'
